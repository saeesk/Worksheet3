#Problem 1 
library(profvis)
profvis({
  attempts = function(age)
  {
    count = 0
    remain = age
    while(remain >0)
    {
      count = count + 1
      blow_out = sample(1 : remain, size = 1)
      remain = remain - blow_out
    }
    return(count)
  }
  att_vec = numeric(length = 1e3)
  for( i in 1: 1e3)
  {
    att_vec[i] = attempts(25)
  }
})

profvis({
  attempts = function(age)
  {
    count = 0
    remain = age
    while(remain >0)
    {
      count = count + 1
      blow_out = sample(1 : remain, size = 1)
      remain = remain - blow_out
    }
    return(count)
  }
  
   att_vec= replicate(1e3,attempts(25))  # replicate( no of times , object to be replicated)
})


#Problem 2 
#making function and calling them inside the benchmark
library(rbenchmark)
for_loop = function()
{
 att_vec = numeric(length = 1e3)
 for( i in 1 : 1e3)
 {
   att_vec[i]= attempts(25)
 }
}

no_loop = function()
{
  replicate(1e3 , attempts(25))
}
benchmark(for_loop(), no_loop() , replications = 100)


#Not using separate functions
library(rbenchmark)
benchmark(
  {
    att_vec = numeric(length = 1e3)
    for( i in 1 : 1e3)
    {
      att_vec[i]= attempts(25)
    }
  } , replicate(1e3 , attempts(25)) ,replications = 100
)



#Problem 3
library(rbenchmark)
benchmark(
  {
    att_vec = numeric(length = 1e4)
    for( i in 1 : 1e4)
    {
      att_vec[i]= attempts(25)
    }
  } , replicate(1e4 , attempts(25)) ,replications = 20
)


#Problem 4 
library(rbenchmark)
benchmark(
  {
    att_vec = numeric(length = 1e4)
    for( i in 1 : 1e4)
    {
      att_vec[i]= attempts(25)
    }
  } , replicate(1e4 , attempts(25)), 
  {
    att_vec = NULL
    for( i in 1:1e4)
    {
     att_vec= c(att_vec , attempts(25))
    }
  },
  replications = 20
)


#Problem 5 

library(rbenchmark)
means.loop = function(p,q)
{
  my_mat = matrix(runif(n = p*q , min = 0 ,max = 1) , nrow = p , ncol = q)
  scol = 0
  for( i in 1 : q)
  {
    scol = scol + sum(my_mat[,i])
  }
  mcol = scol/q
}

col.apply = function(p,q)
{
  my_mat = matrix(runif(n = p*q, min = 0 ,max = 1) , nrow = p, ncol = q)
  mcol = apply(my_mat ,2, mean)
}

col.means = function(p,q)
{
  my_mat = matrix(runif(n = p*q, min = 0 ,max = 1) , nrow = p, ncol = q)
  colMeans(my_mat)
}
    
benchmark( means.loop(p =10,q = 10) , col.apply(p = 10 , q = 10) , col.means(p = 10 , q = 10),replications = 1000)


#Problem 6
library(rbenchmark)
benchmark(
  {
    unif.sample = numeric(length = 1e4)
    for( i in 1:1e4)
    {
      unif.sample[i] = runif( n =1 , min = 0 , max = 1)
    }
  } , runif(n = 1e4 , min = 0 , max = 1) , replications = 100
)


#Problem 7 
num1 = numeric(length = 1e3)
num2 = numeric(length = 1e4)
mat1 = matrix(100*1000 , nrow = 100 , ncol = 1000)
mat2 = matrix( 0 ,nrow = 100 , ncol = 1000)
array = array( 0 , dim = c(100 , 100, 100))

object.size(num1)
object.size(num2)
object.size(mat1)
object.size(mat2)
object.size(array)


